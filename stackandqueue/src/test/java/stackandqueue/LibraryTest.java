/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackandqueue;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {

    private Stack testStack = new Stack();
    private Queue testQueue = new Queue();
    private Queue testToStringQueue = new Queue();
    private QueueOfStacks testQS = new QueueOfStacks();


    @Before public void setup(){
        testStack.push("valueOne");
        testQueue.enqueue("valueOne");
        testToStringQueue.enqueue("valueOne");
        testToStringQueue.enqueue("valueTwo");
    }

    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }


    @Test public void testStackPop(){
        testStack.push("valueTwo");
        assertEquals("valueTwo", testStack.pop());
    }

    @Test public void testStackToString(){
        testStack.push("valueTwo");
        assertEquals("valueOne -> valueTwo", testStack.toString());
    }

    @Test public void testQueuePeek(){
        assertEquals("valueOne",testQueue.peek());
    }

    @Test public void testQueueDequeue(){
        assertEquals("valueOne", testQueue.dequeue());
    }

    @Test public void testQueueToString(){
        assertEquals("valueOne -> valueTwo", testToStringQueue.toString());
    }

    @Test public void testQueueOfStacks(){
        testQS.enqueue("A");
        testQS.enqueue("B");
        testQS.enqueue("C");
        System.out.println(testQS.dequeue());
        testQS.enqueue("D");
        System.out.println(testQS.dequeue());
        testQS.enqueue("E");
        System.out.println(testQS.dequeue());
        assertEquals("D", testQS.dequeue());
    }
}
